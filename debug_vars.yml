---
# DEBUG VARIABLES {{{
#
# This is a simple, short, standalone and stupid playbook to track undefined
# user-defined variables declared in `group_vars` and `host_vars` directories
# (beside the playbook as well as within inventory). Wait. What does it mean,
# exactly: undefined user-defined variables ? For example:
#
#---
#bar: "foo"
#foo: "{{ bar }}"
#
# ==> "foo": "foo"
#
#---
#foo: "{{ bar }}"
#
# ==> "foo": "VARIABLE IS NOT DEFINED!"                       (not verbose)
# ==> "foo": "VARIABLE IS NOT DEFINED!: 'bar' is undefined"   (verbose)
#
# Here, `foo` is an user-defined variable (not an ansible reserved variable,
# between others). If `bar` is defined, then `foo` is. If `bar` is not defined,
# then `foo` is not too. But `foo` will cause an error, not `bar`. Try with
# `debug_vars__remote_facts` set to yes and no, and:
#
#---
#foo: "{{ ansible_fqdn }}"
#
#
# Additionally, this playbook performs checks against variables namespaces and
# overrides. The related tasks are only informative and don't cause a failure
# for the entire play (but only for the blocks they're in). These tasks aren't
# performed at all if the list of variables is based upon user input.
#
# Without customization, this playbook will fail in almost all cases, i.e. it
# will report errors about undefined variables.  If it is not the case, you
# should first ensure that clear passwords are not hardcoded in your ansible's
# git repository !
#
# Variables that control the behavior of this playbook:
#
# | NAME                     | SHORTCUT     | TYPE   | DEFAULT |
# | ------------------------ | ------------ | ------ | ------- |
# | debug_vars__remote_facts | remote_facts | bool   | False   |
# | debug_vars__error_filter | error_filter | regex  | ''      |
# | debug_vars__error_assume | error_assume | int    | 0       |
# | debug_vars__pfx_min_uses | pfx_min_uses | int    | 4       |
# | debug_vars__pfx_max_none | pfx_max_none | int    | 10      |
# | debug_vars__pfx_max_once | pfx_max_once | int    | 10      |
# | debug_vars__from_pattern | from_pattern | regex  | ''      |
# | debug_vars__from_list    | from_list    | list,  | []      |
# |                          |              | string |         |
#
#
# FALSE POSITIVE WORKAROUNDS
#
# * debug_vars__remote_facts
#   When `True`, facts are gathered on the remote host, so variables whose the
#   values depend on `{{ ansible_fqdn }}` or any other fact are defined. When
#   `False`, there is no connection to the remote host at all, so variables
#   consistency can be checked apart (no need of credentials to login to the
#   hosts, even no need of the hosts themselves).
#
# * debug_vars__error_filter
#   Because of not gathering facts, or because of vaulted values, or because
#   they are set by a specific role, or for whatever reason you want, some
#   variables may be legitimally undefined when running this playbook. For
#   example, with passwords vaulted and retrieved with an `include_vars`:
#   debug_vars__error_filter: '_password$'
#   And yes, if you can't catch all of them in a simple regex, maybe it's time
#   to think to refactor them.
#
# * debug_vars__error_assume
#   A kind of quick start for the impatient. Instead of ignoring errors
#   globally, and if a regex is too hard to write or maintain, assume a given
#   number of errors. For example, assume 2 undefined variables. Unlike the
#   error_filter results, assumed errors are reported in the list of errors,
#   but will not cause the playbook failure.
#
#
# VARIABLES SUBSETS
#
# * debug_vars__from_list
#   A specific variable, or a specific list of variables. When defined, it
#   overrides the dynamic query of all the variables applying to the host,
#   and only the provided variable names are evaluated. This can be used to
#   compare values of a single variable on many hosts.
#   The "list" can be either a YAML list, or any stringlist with commas and/or
#   spaces as field separators. We don't want to worry further about Jenkins
#   users inputs, we just accept versatile input formats. This is a valid
#   input: 'foo, bar baz ,, ,  foobaz foo,foobar, '; that will be converted into
#   the YAML list: [ "bar", "baz", "foo", "foobar", "foobaz" ] (sorted and
#   deduplicated).
#
# * debug_vars__from_pattern
#   When defined, it filters the dynamic query of all the variables applying
#   to the host, and only the variable matching the provided regular expression
#   are evaluated. For example, 'from_pattern=mail' will restrict list of vars
#   to those containing the 'mail' string (anywhere in the name; the pattern
#   also supports anchors).
#
#
# CHECKS AGAINST VARIABLES NAMESPACES
#
# * debug_vars__pfx_max_none
#   About namespaces. The max number of variables not using a prefix, i.e.
#   single words such as 'application', 'url', 'port', 'service'. Such names
#   should be avoided.
#
# * debug_vars__pfx_max_once
#   About namespaces. The max number of variables using a prefix that is used
#   only once, i.e. names that do not share a namespace, as do single-word
#   names.
#
# * debug_vars__pfx_min_uses
#   About namespaces. The min number of average uses of a prefix (that makes
#   variables share a namespace). Check based upon this variable completes the
#   check based on the previous variable.
#
#
# Usage:
# - set debug_vars__* variables in group_vars/
# - use the shortcuts as extra-vars in commandline
#
# Example:
# ansible-playbook debug_vars.yml -e remote_facts=yes -e error_filter='_password$'
#
#}}}


- name: DEBUG VARIABLES
  hosts: all
  gather_facts: "{{ remote_facts|bool if remote_facts is defined else
                    debug_vars__remote_facts|default(False)|bool }}"

  vars:
    from_list: "{{ debug_vars__from_list|default([]) }}"
    from_pattern: "{{ debug_vars__from_pattern|default('') }}"
    error_filter: "{{ debug_vars__error_filter|default('') }}"
    error_assume: "{{ debug_vars__error_assume|default(0) }}"
    pfx_min_uses: "{{ debug_vars__pfx_min_uses|default(4) }}"
    pfx_max_none: "{{ debug_vars__pfx_max_none|default(10) }}"
    pfx_max_once: "{{ debug_vars__pfx_max_once|default(10) }}"

  tasks:

    ############################################################################
    # GET LIST OF VARIABLES
    #
    # In all cases, some files or directories don't exist, and grep will fail
    # (exit code 2). Piping its output to sort allows the entire command to
    # never fail.  By design, elements of the list aren't deduplicated at this
    # step, so it is possible to see how many times a variable is declared,
    # i.e. how much the repo is simple, clear and easy to understand and to
    # maintain, or is a gaz factory.
    #
    - name: get list of variables
      shell: >
        grep -Ehors '^[_a-zA-Z0-9]+' {{ ( varfiles_all + varfiles_groups + varfiles_host ) | join( ' ' ) }} |
        sort
      delegate_to: localhost
      connection: local
      register: result
      changed_when: false
      vars:
        varfiles_all:
          - "group_vars/all"
          - "group_vars/all.yml"
          - "{{ inventory_dir }}/group_vars/all"
          - "{{ inventory_dir }}/group_vars/all.yml"
        varfiles_host:
          - "host_vars/{{ inventory_hostname }}"
          - "host_vars/{{ inventory_hostname }}.yml"
          - "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}"
          - "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
        varfiles_groups: |
          [
            {% for g in group_names %}
              "group_vars/{{ g }}",
              "group_vars/{{ g }}.yml",
              "{{ inventory_dir }}/group_vars/{{ g }}",
              "{{ inventory_dir }}/group_vars/{{ g }}.yml"
              {{ '' if loop.last else ',' }}
            {% endfor %}
          ]
      tags:
        - always


    ############################################################################
    # SET LIST OF VARIABLES
    #
    # Set the list of variables from the previous dynamic query, or from user
    # input (from_list), or by intersecting the dynamic query and user input
    # (from_pattern).
    #
    - name: set list of variables
      set_fact:
        # We accept all relevant input formats to get a final yaml list, sorted:
        # YAML list, single word, comma-space-separated list of words. Example:
        #     foo, bar,foobar baz   foobaz foo, ,,bar
        # will be converted to:
        #     [ "bar", "baz", "foo", "foobar", "foobaz" ]
        # It uses a pythonic split() method, as there is no such filter in jinja2
        variables: |
          {%
            if not from_list and not from_pattern
              %}{{ host_vars | unique }}{%
            elif from_pattern
              %}{{ host_vars | unique | select('search', from_pattern) | list }}{%
            elif from_list|type_debug != 'list'
              %}{{ (from_list|regex_replace( ' ', ',' )).split( ',' ) | difference(['']) | sort | unique }}{%
            else
              %}{{ from_list | sort | unique }}{%
            endif
          %}
        # This building (vars + set_fact) allows the current task to:
        # - set host_vars in 'vars' FOR the task (make it usable by set_fact)
        # - set host_vars FROM the task (set_fact) FOR the rest of the playbook
        host_vars: "{{ host_vars }}"
      vars:
        host_vars: "{{ result.stdout_lines }}"
      tags:
        - always


    ############################################################################
    # DISPLAY LIST OF VARIABLES
    #
    - name: display list of variables
      debug:
        var: variables
      tags:
        - listvars


    ############################################################################
    # CHECK NAMESPACES OF VARIABLES
    #
    # This tries to check namespaces by following basic criteria:
    # - the number of single-word variables should be small
    # - the number of prefixes used only once should be small
    # - the average number of times a prefix is used should be high
    #
    # A single word variable may be either 'application', '_app_',
    # or even '____' (yes, it is).  A prefix is what comes before
    # a double underscore, if any, otherwise what comes before the
    # first underscore.
    #
    - name: check namespaces of variables
      block:
        - name: fail if too many vars are single words
          debug:
            var: onewords
          register: _onewords_
          ignore_errors: true
          # Fail if the number of single-word variable names is more than N%
          # of the total number of variables and more than N (absolute).
          failed_when:
            - onewords|length * 100 / host_vars|unique|length > pfx_max_none|int
            - onewords|length > pfx_max_none|int

        - name: fail if too many prefixes are used only once
          debug:
            var: usedonce
          register: _usedonce_
          ignore_errors: true
          # Fail if the number of prefixes used once is more than N% of the
          # total number of variables and more than N (absolute).
          failed_when:
            - usedonce|length * 100 / host_vars|unique|length > pfx_max_once|int
            - usedonce|length > pfx_max_once|int

        - name: fail if prefixes have too low average use
          debug:
            var: prefixes
          register: _prefixes_
          ignore_errors: true
          # Fail if the average use of any prefix is less than X occurences
          failed_when:
            - prfxs|length / prefixes|list|length < pfx_min_uses|int

          # This task will fail if at least 2 of the 3 tasks above have failed,
          # otherwise it is skipped.
        - name: fail because of a big mess in your namespaces
          debug:
            msg: "when you can do it simple, do it simple"
          failed_when: true
          when:
            - _onewords_ is failed or _prefixes_ is failed
            - _prefixes_ is failed or _usedonce_ is failed
            - _usedonce_ is failed or _onewords_ is failed
            # That could also be written:
            #- ( _onewords_ is failed and _prefixes_ is failed ) or
            #  ( _prefixes_ is failed and _usedonce_ is failed ) or
            #  ( _usedonce_ is failed and _onewords_ is failed )

      rescue:
        - name: "CONFUSING VARIABLES"
          debug:
            msg: "it's time to do things simple and burn the gaz factory"

      vars:
        # Search for 'prefix__*', 'another_prefix__*', 'yet_another_prefix__*',
        # if any, then just for 'prefix_*'.
        prfxs: |
          [
            {% for name in host_vars|unique %}
              {% if name|regex_search('^[a-zA-Z0-9]+(_[a-zA-Z0-9]+)?__[a-zA-Z0-9]+') %}
              "{{ name | regex_replace('__.+$', '__') }}"{{ '' if loop.last else ',' }}
              {% elif name|regex_search('^[a-zA-Z0-9]+_[a-zA-Z0-9]+') %}
              "{{ name | regex_replace('_.+$', '_') }}"{{ '' if loop.last else ',' }}
              {% endif %}
            {% endfor %}
          ]
        prefixes: |
          {
            {% for pfx in prfxs|sort|unique %}
            "{{ pfx }}": {{ prfxs.count(pfx) }}{{ '' if loop.last else ',' }}
            {% endfor %}
          }
        usedonce: |
          [
            {% for pfx in prfxs|sort|unique if prfxs.count(pfx) == 1 %}
            "{{ pfx }}"{{ '' if loop.last else ',' }}{% endfor %}
          ]
        onewords: "{{ host_vars | unique | select('search','^_*[a-zA-Z0-9]*_*$') | list }}"
      tags:
        - "{{ 'namespaces' if not from_list and not from_pattern else 'never' }}"


    ############################################################################
    # CATCH OVERRIDDEN VARIABLES
    #
    # This block is to trigger a handled error when:
    #
    # - a lot of variables are declared more than once, that may happen because
    #   of a lack of factorization in their valorization, or typically when a
    #   host has been mistakenly put in a group. For example if host `foobar`
    #   is member of `roma` group of webservers, and has been forgotten in
    #   another group of webservers, say `goteborg`. Deployment on `foobar`
    #   may as well never fail, as long as all variables set for `goteborg`
    #   are set for `roma` too, and as long as `roma` has precedence over
    #   `goteborg`, and as long as nothing evolves. Do you feel the ghost
    #   behind the door ?
    #
    # - a same variable is declared more than twice, that means it is difficult
    #   to follow it through the directory trees, and easy to forget the right
    #   place to set it for good. That may happen when:
    #   * the variable is set in group_vars/all, overridden for a group, then
    #     overridden for the host. It may be the right way, but you should ask
    #     if it is possible to get better factorization of the value, that may
    #     lead to remove one or more declarations.
    #   * the variable is errouneously set for a group that should not hold it,
    #     or the host is member of a group by mistake, or because of a mess in
    #     multi-instanciated services variables, or whatever you want, but that
    #     is NOGOOAALL (NOt GOOd At ALL), aka « no goal ».
    #
    - name: catch overridden variables
      block:
        - name: catch overridden variables (fail if too many)
          debug:
            var: duplicates
          # Fail if more than N% of variables are overridden and if overridden
          # variables are more than N (absolute).
          failed_when:
            - duplicates|list|length * 100 / host_vars|unique|length > 10
            - duplicates|list|length > 10

        - name: fail if variables are overridden twice and more
          debug:
            var: multicates
          when: multicates != {}
          failed_when: true

      rescue:
        - name: "OVERRIDDEN VARIABLES"
          debug:
            msg: "it's time to do things simple and burn the gaz factory"

      when: duplicates != {}
      vars:
        # It uses a pythonic count() method, as there is no such filter in jinja2
        duplicates: |
          {
            {% for dup in variables if host_vars.count(dup) > 1 %}
            "{{ dup }}": {{ host_vars.count(dup) }}{{ '' if loop.last else ',' }}
            {% endfor %}
          }
        multicates: |
          {
            {% for dup in variables if host_vars.count(dup) > 2 %}
            "{{ dup }}": {{ host_vars.count(dup) }}{{ '' if loop.last else ',' }}
            {% endfor %}
          }
      tags:
        - "{{ 'overridden' if not from_list and not from_pattern else 'never' }}"


    ############################################################################
    # CATCH UNDEFINED VARIABLES
    #
    # This is the primary purpose of this playbook.
    #
    - name: catch undefined variables
      block:
        - name: evaluate variables (fail if undefined and not filtered)
          debug:
            var: "{{ item }}"
          loop: "{{ variables }}"
          register: debug
          failed_when:
            - debug[item]|string | regex_search(oh_my_bad)
            - not item | regex_search(error_filter)

        - name: SUCCESS
          debug:
            msg: "all variables ({{ variables | length }}) are defined{{
              '' if error_filter == '' else ' - or filtered by this regex: `%s`' % error_filter }}"

      rescue:
        - name: "UNDEFINED VARIABLES"
          debug:
            var: errors
          vars:
            digest: |
              [
                {% for res in debug.results %}{% for key in res %}
                {% if res[key]|string | regex_search(oh_my_bad) and not key|regex_search(error_filter) %}
                "{{ key }}"{% else %}""{% endif %}{{ '' if loop.last else ',' }}
                {% endfor %}{{ '' if loop.last else ',' }}{% endfor %}
              ]
            errors: "{{ digest | difference(['']) }}"
          failed_when: errors|length > error_assume|int

      vars:
        oh_my_bad: '^VARIABLE IS NOT DEFINED!'
      tags:
        - notdefined
