# This is a simple, short, standalone and stupid playbook to track undefined
# user-defined variables declared in `group_vars` and `host_vars` directories
# (beside the playbook as well as within inventory). Wait. What does it mean,
# exactly: undefined user-defined variables ? For example:
#
#---
#bar: "foo"
#foo: "{{ bar }}"
#
# ==> "foo": "foo"
#
#---
#foo: "{{ bar }}"
#
# ==> VARIABLE IS NOT DEFINED!
#
# Here, `foo` is an user-defined variable (not an ansible reserved variable,
# between others). If `bar` is defined, then `foo` is. If `bar` is not defined,
# then `foo` is not too. But `foo` will cause an error, not `bar`. Try with
# `debug_vars__remote_facts` set to yes and no, and:
#
#---
#foo: "{{ ansible_fqdn }}"
#
#
# Variables to control the behavior of this playbook:
#
# | NAME                     | SHORTCUT     | TYPE   | DEFAULT           |
# | ------------------------ | ------------ | ------ | ----------------- |
# | debug_vars__remote_facts | remote_facts | bool   | False             |
# | debug_vars__regex_filter | regex_filter | regex  | : (match nothing) |
# | debug_vars__assume_error | assume_error | int    | 0                 |
# | debug_vars__check_vars   | check_vars   | list,  |                   |
# |                          |              | string |                   |
#
# Usage:
# - set debug_vars__* variables in group_vars/
# - use the shortcuts as extra-vars in commanline
#
# Example:
# ansible-playbook debug_vars.yml -e remote_facts=yes -e regex_filter='_password$'

---
- hosts: all
  gather_facts: "{{ remote_facts|bool if remote_facts is defined else
                    debug_vars__remote_facts|default(False)|bool }}"

  vars:
    oh_my_bad: "VARIABLE IS NOT DEFINED!"
    check_vars: "{{ debug_vars__check_vars|default([]) }}"
    regex_filter: "{{ debug_vars__regex_filter|default(':') }}"
    assume_error: "{{ debug_vars__assume_error|default(0) }}"

    varfiles_all:
      - "group_vars/all"
      - "group_vars/all.yml"
      - "{{ inventory_dir }}/group_vars/all"
      - "{{ inventory_dir }}/group_vars/all.yml"
    varfiles_groups: |
      [
        {% for g in group_names %}
          "group_vars/{{ g }}",
          "group_vars/{{ g }}.yml",
          "{{ inventory_dir }}/group_vars/{{ g }}",
          "{{ inventory_dir }}/group_vars/{{ g }}.yml"
          {{ '' if loop.last else ',' }}
        {% endfor %}
      ]
    varfiles_host:
      - "host_vars/{{ inventory_hostname }}"
      - "host_vars/{{ inventory_hostname }}.yml"
      - "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}"
      - "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"

  tasks:
    - name: get list of variables
      shell: >
        grep -Ehors '^[_a-zA-Z0-9]+' {{ ( varfiles_all + varfiles_groups + varfiles_host ) | join( ' ' ) }} |
        sort
      delegate_to: localhost
      connection: local
      register: result
      changed_when: false
      when: check_vars in [[],'']

    - name: set list of variables
      set_fact:
        # We accept all relevant input formats to get a final yaml list, sorted:
        # - yaml list
        # - single word
        # - comma-space-separated list of words
        #   example: foo, bar,foobar baz   foobaz foo, ,,bar
        #   will be converted to: [ "bar", "baz", "foo", "boobar", "foobaz" ]
        variables: |
          {%
            if check_vars in [[],'']
              %}{{ result.stdout_lines | unique }}{%
            elif check_vars|type_debug == 'list'
              %}{{ check_vars | sort | unique }}{%
            elif ',' in check_vars|string or ' ' in check_vars|string
              %}{{ (check_vars|regex_replace( ' ', ',' )).split( ',' ) | difference(['']) | sort | unique }}{%
            else %}{{ [check_vars] | flatten | sort | unique }}{%
            endif
          %}

    - name: display list of variables
      debug:
        var: variables

    - name: catch undefined variables
      block:
        - name: evaluate variables (fail if undefined and not filtered)
          debug:
            var: "{{ item }}"
          loop: "{{ variables }}"
          register: debug
          failed_when:
            - debug[item] == oh_my_bad
            - not item | regex_search(regex_filter)

        - name: SUCCESS
          debug:
            msg: "all variables ({{ variables | length }}) are defined{{
              '' if regex_filter == ':' else ' - or filtered by this regex: `%s`' % regex_filter }}."

      rescue:
        - name: "UNDEFINED VARIABLE(S) [/{{ variables | length }}]"
          debug:
            var: errors
          vars:
            digest: |
              [
                {% for res in debug.results %}{% for key in res %}
                {% if res[key] == oh_my_bad and not key|regex_search(regex_filter) %}
                "{{ key }}"{% else %}""{% endif %}{{ '' if loop.last else ',' }}
                {% endfor %}{{ '' if loop.last else ',' }}{% endfor %}
              ]
            errors: "{{ digest | difference(['']) }}"
          failed_when: errors|length > assume_error|int

