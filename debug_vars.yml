# This is a simple, short, standalone and stupid playbook to track undefined
# user-defined variables declared in `group_vars` and `host_vars` directories
# (beside the playbook as well as within inventory). Wait. What does it mean,
# exactly: undefined user-defined variables ? For example:
#
#---
#bar: "foo"
#foo: "{{ bar }}"
#
# ==> "foo": "foo"
#
#---
#foo: "{{ bar }}"
#
# ==> VARIABLE IS NOT DEFINED!
#
# Here, `foo` is an user-defined variable (not an ansible reserved variable,
# between others). If `bar` is defined, then `foo` is. If `bar` is not defined,
# then `foo` is not too. But `foo` will cause an error, not `bar`. Try with
# `debug_vars_with_facts` set to yes and no, and:
#
#---
#foo: "{{ ansible_fqdn }}"
#
# Variables to control the behavior of this playbook with --extra-vars:
#
# * debug_vars_with_facts (bool)
# * debug_vars_accept_errors (int)
# * debug_vars_ignore_errors (bool)
#

---
- hosts: all
  gather_facts: "{{ debug_vars_with_facts|default(False) }}"

  # No need to set them in a dedicated set_fact task.
  vars:
    oh_my_bad: "VARIABLE IS NOT DEFINED!"
    varfiles_all:
      - "group_vars/all"
      - "group_vars/all.yml"
      - "{{ inventory_dir }}/group_vars/all"
      - "{{ inventory_dir }}/group_vars/all.yml"
    varfiles_groups: |
      [
        {% for g in group_names %}
          "group_vars/{{ g }}",
          "group_vars/{{ g }}.yml",
          "{{ inventory_dir }}/group_vars/{{ g }}",
          "{{ inventory_dir }}/group_vars/{{ g }}.yml"
          {{ '' if loop.last else ',' }}
        {% endfor %}
      ]
    varfiles_host:
      - "host_vars/{{ inventory_hostname }}"
      - "host_vars/{{ inventory_hostname }}.yml"
      - "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}"
      - "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"

  tasks:
    - name: get variables names (sorted)
      shell: >
        grep -hors '^[a-z][_a-zA-Z0-9]*:' {{ ( varfiles_all + varfiles_groups + varfiles_host ) | join( ' ' ) }} |
        sed 's,:,,' | sort -u
      delegate_to: localhost
      connection: local
      register: result
      changed_when: false

    - name: track undefined variables
      block:
        - name: evaluate variables (fail if undefined)
          debug:
            var: "{{ item }}"
          loop: "{{ result.stdout_lines + [ 'result.stdout_lines|length' ] }}"
          register: debug
          failed_when:
            - debug[item] == oh_my_bad
            # filter results for variables that are not expected to be defined
            # so early. Say, here: all variables whose the name matches a given
            # regexp.
            #- not item | regex_search('_password$')

        - name: SUCCESS
          debug:
            msg: "All your variables are defined."

      rescue:
        - name: "UNDEFINED VARIABLE(S) [/{{ result.stdout_lines | length }}]"
          debug:
            var: errors
          vars:
            digest: |
              [
                {% for res in debug.results %}
                {% for key in res %}
                {% if res[key] == oh_my_bad %}
                "{{ key }}"{% else %}""
                {% endif %}{{ '' if loop.last else ',' }}
                {% endfor %}{{ '' if loop.last else ',' }}{% endfor %}
              ]
            errors: "{{ digest | unique | difference(['']) }}"
          failed_when:
            - errors|length > debug_vars_accept_errors|default(0)|int
            - not debug_vars_ignore_errors|default(False)|bool

